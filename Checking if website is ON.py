# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11SIOgO7FrpY1-cT9Ji8A9yh8X6xykhbj
"""

import requests
import time
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# List of URLs to monitor
urls_to_check = ["http://uok.ac.rw", "http://uok.ac.rw"]

# Email configuration
receiver_email = "mbappenews2222@gmail.com"
sender_email = "saulkwihangana10@gmail.com"  # Your Gmail address
app_password = "umge stqu ubzq gauy"  # App password generated for 2FA

# SMTP server configuration (for Gmail)
smtp_server = "smtp.gmail.com"
smtp_port = 587

def send_email(subject, body):
    try:
        # Create the email message
        message = MIMEMultipart()
        message["From"] = sender_email
        message["To"] = receiver_email
        message["Subject"] = subject
        message.attach(MIMEText(body, "plain"))

        # Connect to the SMTP server
        with smtplib.SMTP(smtp_server, smtp_port) as server:
            server.starttls()  # Secure the connection
            server.login(sender_email, app_password)  # Login using the App Password
            text = message.as_string()
            server.sendmail(sender_email, receiver_email, text)  # Send the email
            print(f"Email sent to {receiver_email}")
    except smtplib.SMTPAuthenticationError as e:
        # Catch authentication errors and send a report email
        error_message = f"Login failed for {sender_email}. Error: {str(e)}"
        print(error_message)
        # Send a failure email about the login issue
        send_email("Login Failure Report", error_message)
    except Exception as e:
        print(f"Error sending email: {e}")

def check_website_status(url):
    try:
        response = requests.get(url)
        if response.status_code == 200:
            print(f"Website {url} is up!")
            return True
        else:
            print(f"Website {url} returned status code {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"Error with website {url}: {e}")
        return False

def monitor_websites():
    while True:
        for url in urls_to_check:
            print(f"Checking {url}...")
            if not check_website_status(url):
                subject = f"Website {url} is Down"
                body = f"The website {url} is currently down. Please check the status."
                send_email(subject, body)
            time.sleep(5)  # Wait for 5 seconds before checking again

if __name__ == "__main__":
    print("Website monitor started.")
    monitor_websites()